Oimport math

class PIDController():
    def __init__(self, robot):
        self.robot = robot
        self.speed = 0.425
        self.kp = 5
        self.ki = 0
        self.kd = 0
        self.previous_error = 0
        self.integral_error = 0


    def control(self, target):
        #target = sphericalTarget.toENU(self.robot.reference)
        #u_x = target[0] - self.robot.x
        #u_y = target[1] - self.robot.y
        #target_theta = math.atan2(u_y, u_x)
        current_point, _ = self.robot.gps.read()
        target_theta = current_point.bearingTo(target)
        target_theta = math.atan2(math.sin(target_theta), math.cos(target_theta))
        current_heading = self.robot.bno055.get_heading_radians()
        current_heading = math.atan2(math.sin(current_heading), math.cos(current_heading))
        u_theta = target_theta - current_heading
        current_error = math.atan2(math.sin(u_theta), math.cos(u_theta))
        differential_error = current_error - self.previous_error
        integral_error = current_error + self.integral_error

        self.previous_error = current_error
        self.integral_error = integral_error

        w = current_error * self.kp + differential_error * self.kd + integral_error * self.ki

        # Improved debug print block
        #print("\n" + "-"*36)
        #print(f"[CONTROL] Current GPS:      lat={current_point.latitude:.6f}, lon={current_point.longitude:.6f}")
        #print(f"[CONTROL] Target bearing:   {math.degrees(target_theta):.2f}° ({target_theta:.3f} rad)")
        #print(f"[CONTROL] Robot heading:    {math.degrees(current_heading):.2f}° ({current_heading:.3f} rad)")
        #print(f"[CONTROL] Heading error:    {math.degrees(u_theta):.2f}° ({u_theta:.3f} rad)")
        #print(f"[CONTROL] PID error:        {current_error:.3f}")
        #print(f"[CONTROL] Differential err: {differential_error:.3f}")
        #print(f"[CONTROL] Integral error:   {integral_error:.3f}")
        #print(f"[CONTROL] PID output (w):   {w:.3f}")
        #print(f"[CONTROL] Calibration:      {self.robot.bno055.get_calibration_status()}")
        #print("-"*36 + "\n")

        return self.speed, w

